name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.7.3)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate Release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
        else
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        echo "Version: $VERSION"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.2.3"
          exit 1
        fi

    - name: Check if version exists in pyproject.toml
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        VERSION_NUMBER=${VERSION#v}
        if ! grep -q "version = \"$VERSION_NUMBER\"" pyproject.toml; then
          echo "Version $VERSION_NUMBER not found in pyproject.toml"
          echo "Please update the version in pyproject.toml first"
          exit 1
        fi

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, using all commits"
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
        fi
        
        # Create changelog
        cat > release_changelog.md << EOF
        ## What's Changed in $VERSION
        
        $COMMITS
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION
        EOF
        
        echo "changelog=release_changelog.md" >> $GITHUB_OUTPUT

    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: release_changelog.md

  # Build Release Assets
  build:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build distribution packages
      run: |
        python -m build

    - name: Generate SBOM
      run: |
        pip install cyclonedx-bom
        cyclonedx-py -o slack-kb-agent-sbom.json

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: distribution
        path: |
          dist/
          slack-kb-agent-sbom.json

  # Build and Push Container
  container:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.image-uri }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.validate.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

  # Security Scanning
  security:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: container
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.container.outputs.image-uri }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for critical vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.container.outputs.image-uri }}
        format: 'table'
        severity: 'CRITICAL'
        exit-code: '1'

  # Create GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, container, security]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download changelog
      uses: actions/download-artifact@v3
      with:
        name: changelog

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: distribution

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        release_name: Release ${{ needs.validate.outputs.version }}
        body_path: release_changelog.md
        draft: false
        prerelease: false

    - name: Upload Python wheel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/slack_kb_agent-${{ needs.validate.outputs.version }}-py3-none-any.whl
        asset_name: slack_kb_agent-${{ needs.validate.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip

    - name: Upload source distribution
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/slack_kb_agent-${{ needs.validate.outputs.version }}.tar.gz
        asset_name: slack_kb_agent-${{ needs.validate.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload SBOM
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./slack-kb-agent-sbom.json
        asset_name: slack-kb-agent-sbom.json
        asset_content_type: application/json

  # Publish to Package Registries
  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [validate, build, release]
    environment: production
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: distribution

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: dist/

  # Update Documentation
  docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update version in documentation
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        VERSION_NUMBER=${VERSION#v}
        
        # Update README badges
        sed -i "s/slack--kb--agent-v[0-9]\+\.[0-9]\+\.[0-9]\+/slack--kb--agent-$VERSION/g" README.md
        
        # Update installation instructions
        sed -i "s/slack_kb_agent==[0-9]\+\.[0-9]\+\.[0-9]\+/slack_kb_agent==$VERSION_NUMBER/g" README.md

    - name: Create documentation PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "docs: update version references to ${{ needs.validate.outputs.version }}"
        title: "Update documentation for release ${{ needs.validate.outputs.version }}"
        body: |
          Auto-generated PR to update documentation after release ${{ needs.validate.outputs.version }}
          
          Changes:
          - Updated version badges in README
          - Updated installation instructions
        branch: docs/update-${{ needs.validate.outputs.version }}

  # Post-Release Tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate, release, publish]
    steps:
    - name: Notify teams
      run: |
        echo "🎉 Release ${{ needs.validate.outputs.version }} published successfully!"
        echo "📦 PyPI: https://pypi.org/project/slack-kb-agent/${{ needs.validate.outputs.version }}/"
        echo "🐳 Container: ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.version }}"
        echo "📋 Release Notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}"

    - name: Update project metrics
      run: |
        # This could update:
        # - Project dashboard
        # - Release metrics
        # - Download counters
        # - etc.
        echo "Updating project metrics for release ${{ needs.validate.outputs.version }}"

    - name: Schedule follow-up tasks
      run: |
        echo "Scheduling follow-up tasks:"
        echo "- Monitor release adoption"
        echo "- Track any issues or bug reports"
        echo "- Update roadmap with completed features"