[tox]
envlist = py38,py39,py310,py311,lint,security,docs,coverage
skip_missing_interpreters = true
isolated_build = true

[testenv]
deps = 
    pytest
    pytest-cov
    pytest-mock
    pytest-xdist
    pytest-benchmark
commands = 
    pytest tests/ -v --cov=src/slack_kb_agent --cov-report=term --cov-report=html

[testenv:lint]
deps = 
    ruff
    mypy
    black
    bandit
commands = 
    black --check src/ tests/
    ruff check src/ tests/
    mypy src/slack_kb_agent/
    bandit -r src/

[testenv:security]
deps = 
    bandit
    safety
    pip-audit
commands = 
    bandit -r src/ -f json -o bandit-report.json
    safety check --json --output safety-report.json
    pip-audit --format=json --output=audit-report.json

[testenv:docs]
deps = 
    sphinx
    sphinx-rtd-theme
    myst-parser
commands = 
    sphinx-build -W -b html docs docs/_build/html

[testenv:coverage]
deps = 
    pytest
    pytest-cov
    coverage[toml]
commands = 
    coverage run -m pytest tests/
    coverage report --show-missing
    coverage html
    coverage xml

[testenv:performance]
deps = 
    pytest
    pytest-benchmark
    pytest-mock
commands = 
    pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

[testenv:integration]
deps = 
    pytest
    pytest-mock
    docker-compose
commands = 
    docker-compose -f docker-compose.test.yml up -d
    pytest tests/ -v -m integration
    docker-compose -f docker-compose.test.yml down

[testenv:clean]
deps = 
commands = 
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.coverage', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.mypy_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.ruff_cache', ignore_errors=True)"

[flake8]
max-line-length = 88
extend-ignore = E203, W503
exclude = 
    .git,
    __pycache__,
    .tox,
    .venv,
    venv,
    dist,
    build,
    migrations

[coverage:run]
source = src
omit = 
    */tests/*
    */migrations/*
    */__pycache__/*
    .tox/*
    .venv/*
    venv/*

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod